{"version":3,"file":"column.js","names":["utils","require","Column","col","ws","collapsed","customWidth","hidden","max","min","outlineLevel","style","colWidth","w","TypeError","width","level","parseInt","undefined","jumpTo","o","opts","sheetView","pane","state","xSplit","activePane","ySplit","topLeftCell","getExcelCellRef","getExcelRowCol","row","module","exports"],"sources":["../../../source/lib/column/column.js"],"sourcesContent":["const utils = require('../utils.js');\n\nclass Column {\n    /**\n     * Element representing an Excel Column\n     * @param {Number} col Column of cell\n     * @param {Worksheet} Worksheet that contains column\n     * @property {Worksheet} ws Worksheet that contains the specified Column\n     * @property {Boolean} collapsed States whether the column is collapsed if part of a group\n     * @property {Boolean} customWidth States whether or not the column as a width that is not default\n     * @property {Boolean} hidden States whether or not the specified column is hiddent\n     * @property {Number} max The greatest column if part of a range\n     * @property {Number} min The least column if part of a range\n     * @property {Number} outlineLevel The grouping leve of the Column\n     * @property {Number} style ID of style\n     * @property {Number} width Width of the Column\n     */\n    constructor(col, ws) {\n        this.ws = ws;\n        this.collapsed = null;\n        this.customWidth = null;\n        this.hidden = null;\n        this.max = col;\n        this.min = col;\n        this.outlineLevel = null;\n        this.style = null;\n        this.colWidth = null;\n    }\n\n    get width() {\n        return this.colWidth;\n    }\n\n    set width(w) {\n        if (typeof w === 'number') {\n            this.colWidth = w;\n            this.customWidth = true;\n        } else {\n            throw new TypeError('Column width must be a number');\n        }\n        return this.colWidth;\n    }\n\n    /**\n     * @alias Column.setWidth\n     * @desc Sets teh width of a column\n     * @func Column.setWidth\n     * @param {Number} val New Width of column\n     * @returns {Column} Excel Column with attached methods\n     */\n    setWidth(w) {\n        this.width = w;\n        return this;\n    }\n\n    /**\n     * @alias Column.hide\n     * @desc Sets a Column to be hidden\n     * @func Column.hide\n     * @returns {Column} Excel Column with attached methods\n     */\n    hide() {\n        this.hidden = true;\n        return this;\n    }\n\n    /**\n     * @alias Column.group\n     * @desc Adds column to the specified group\n     * @func Column.group\n     * @param {Number} level Level of excel grouping\n     * @param {Boolean} collapsed States wheter column grouping level should be collapsed by default\n     * @returns {Column} Excel Column with attached methods\n     */\n    group(level, collapsed) {\n        if (parseInt(level) === level) {\n            this.outlineLevel = level;\n        } else {\n            throw new TypeError('Column group level must be a positive integer');\n        }\n\n        if (collapsed === undefined) {\n            return this;\n        }\n\n        if (typeof collapsed === 'boolean') {\n            this.collapsed = collapsed;\n            this.hidden = collapsed;\n        } else {\n            throw new TypeError('Column group collapse flag must be a boolean');\n        }\n\n        return this;\n    }\n\n    /**\n     * @alias Column.freeze\n     * @desc Creates an Excel pane at the specificed column and Freezes that column from scolling\n     * @func Column.freeze\n     * @param {Number} jumptTo Specifies the column that the active pane will be scrolled to by default\n     * @returns {Column} Excel Column with attached methods\n     */\n    freeze(jumpTo) {\n        let o = this.ws.opts.sheetView.pane;\n        jumpTo = typeof jumpTo === 'number' && jumpTo > this.min ? jumpTo : this.min + 1;\n        o.state = 'frozen';\n        o.xSplit = this.min;\n        o.activePane = 'bottomRight';\n        o.ySplit === null ?\n            o.topLeftCell = utils.getExcelCellRef(1, jumpTo) :\n            o.topLeftCell = utils.getExcelCellRef(utils.getExcelRowCol(o.topLeftCell).row, jumpTo);\n        return this;\n    }\n}\n\nmodule.exports = Column;"],"mappings":";;;;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;IAEMC,M;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,gBAAYC,GAAZ,EAAiBC,EAAjB,EAAqB;IAAA;;IACjB,KAAKA,EAAL,GAAUA,EAAV;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,WAAL,GAAmB,IAAnB;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,GAAL,GAAWL,GAAX;IACA,KAAKM,GAAL,GAAWN,GAAX;IACA,KAAKO,YAAL,GAAoB,IAApB;IACA,KAAKC,KAAL,GAAa,IAAb;IACA,KAAKC,QAAL,GAAgB,IAAhB;EACH;;;;SAED,eAAY;MACR,OAAO,KAAKA,QAAZ;IACH,C;SAED,aAAUC,CAAV,EAAa;MACT,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;QACvB,KAAKD,QAAL,GAAgBC,CAAhB;QACA,KAAKP,WAAL,GAAmB,IAAnB;MACH,CAHD,MAGO;QACH,MAAM,IAAIQ,SAAJ,CAAc,+BAAd,CAAN;MACH;;MACD,OAAO,KAAKF,QAAZ;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,kBAASC,CAAT,EAAY;MACR,KAAKE,KAAL,GAAaF,CAAb;MACA,OAAO,IAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAO;MACH,KAAKN,MAAL,GAAc,IAAd;MACA,OAAO,IAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,eAAMS,KAAN,EAAaX,SAAb,EAAwB;MACpB,IAAIY,QAAQ,CAACD,KAAD,CAAR,KAAoBA,KAAxB,EAA+B;QAC3B,KAAKN,YAAL,GAAoBM,KAApB;MACH,CAFD,MAEO;QACH,MAAM,IAAIF,SAAJ,CAAc,+CAAd,CAAN;MACH;;MAED,IAAIT,SAAS,KAAKa,SAAlB,EAA6B;QACzB,OAAO,IAAP;MACH;;MAED,IAAI,OAAOb,SAAP,KAAqB,SAAzB,EAAoC;QAChC,KAAKA,SAAL,GAAiBA,SAAjB;QACA,KAAKE,MAAL,GAAcF,SAAd;MACH,CAHD,MAGO;QACH,MAAM,IAAIS,SAAJ,CAAc,8CAAd,CAAN;MACH;;MAED,OAAO,IAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,gBAAOK,MAAP,EAAe;MACX,IAAIC,CAAC,GAAG,KAAKhB,EAAL,CAAQiB,IAAR,CAAaC,SAAb,CAAuBC,IAA/B;MACAJ,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,GAAG,KAAKV,GAA5C,GAAkDU,MAAlD,GAA2D,KAAKV,GAAL,GAAW,CAA/E;MACAW,CAAC,CAACI,KAAF,GAAU,QAAV;MACAJ,CAAC,CAACK,MAAF,GAAW,KAAKhB,GAAhB;MACAW,CAAC,CAACM,UAAF,GAAe,aAAf;MACAN,CAAC,CAACO,MAAF,KAAa,IAAb,GACIP,CAAC,CAACQ,WAAF,GAAgB5B,KAAK,CAAC6B,eAAN,CAAsB,CAAtB,EAAyBV,MAAzB,CADpB,GAEIC,CAAC,CAACQ,WAAF,GAAgB5B,KAAK,CAAC6B,eAAN,CAAsB7B,KAAK,CAAC8B,cAAN,CAAqBV,CAAC,CAACQ,WAAvB,EAAoCG,GAA1D,EAA+DZ,MAA/D,CAFpB;MAGA,OAAO,IAAP;IACH;;;;;;AAGLa,MAAM,CAACC,OAAP,GAAiB/B,MAAjB"}