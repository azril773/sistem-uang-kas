{"version":3,"file":"utils.js","names":["types","require","_bitXOR","a","b","maxLength","length","padString","i","String","substr","response","generateRId","text","possible","charAt","Math","floor","random","_rotateBinary","bin","_getHashForChar","char","hash","charCode","charCodeAt","hashBin","parseInt","toString","charBin","nextHash","getHashOfPassword","str","curHash","curHashBin","charCountBin","saltBin","firstXOR","finalHashBin","finalHash","toUpperCase","slice","getExcelAlpha","colNum","remaining","aCharCode","columnName","mod","fromCharCode","getExcelCellRef","rowNum","getExcelRowCol","numeric","split","filter","el","alpha","row","col","reduce","index","arr","pow","getExcelTS","date","thisDt","Date","getTime","epoch","legacyLeapDate","diff2","ts","parseFloat","toFixed","sortCellRefs","aAtt","bAtt","arrayIntersectSafe","Array","ai","bi","result","push","TypeError","getAllCellsInExcelRange","range","cells","cell1props","cell2props","getAllCellsInNumericRange","row1","col1","row2","col2","j","sort","boolToInt","bool","module","exports"],"sources":["../../source/lib/utils.js"],"sourcesContent":["let types = require('./types/index.js');\n\nlet _bitXOR = (a, b) => {\n    let maxLength = a.length > b.length ? a.length : b.length;\n\n    let padString = '';\n    for (let i = 0; i < maxLength; i++) {\n        padString += '0';\n    }\n\n    a = String(padString + a).substr(-maxLength);\n    b = String(padString + b).substr(-maxLength);\n\n    let response = '';\n    for (let i = 0; i < a.length; i++) {\n        response += a[i] === b[i] ? 0 : 1;\n    }\n    return response;\n};\n\nlet generateRId = () => {\n    let text = 'R';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 16; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n};\n\nlet _rotateBinary = (bin) => {\n    return bin.substr(1, bin.length - 1) + bin.substr(0, 1);\n};\n\nlet _getHashForChar = (char, hash) => {    \n    hash = hash ? hash : '0000';\n    let charCode = char.charCodeAt(0);\n    let hashBin = parseInt(hash, 16).toString(2);\n    let charBin = parseInt(charCode, 10).toString(2);\n    hashBin = String('000000000000000' + hashBin).substr(-15);\n    charBin = String('000000000000000' + charBin).substr(-15);\n    let nextHash = _bitXOR(hashBin, charBin);\n    nextHash = _rotateBinary(nextHash);\n    nextHash = parseInt(nextHash, 2).toString(16);\n\n    return nextHash;\n};\n\n//  http://www.openoffice.org/sc/excelfileformat.pdf section 4.18.4\nlet getHashOfPassword = (str) => {\n    let curHash = '0000';\n    for (let i = str.length - 1; i >= 0; i--) {\n        curHash = _getHashForChar(str[i], curHash);\n    }\n    let curHashBin = parseInt(curHash, 16).toString(2);\n    let charCountBin = parseInt(str.length, 10).toString(2);\n    let saltBin = parseInt('CE4B', 16).toString(2);\n\n    let firstXOR = _bitXOR(curHashBin, charCountBin);\n    let finalHashBin = _bitXOR(firstXOR, saltBin);\n    let finalHash = String('0000' + parseInt(finalHashBin, 2).toString(16).toUpperCase()).slice(-4);\n\n    return finalHash;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B\n * getExcelAlpha(2);\n */\nlet getExcelAlpha = (colNum) => {\n    let remaining = colNum;\n    let aCharCode = 65;\n    let columnName = '';\n    while (remaining > 0) {\n        let mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    } \n    return columnName;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} rowNum Row number that is to be transalated\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B1\n * getExcelCellRef(1, 2);\n */\nlet getExcelCellRef = (rowNum, colNum) => {\n    let remaining = colNum;\n    let aCharCode = 65;\n    let columnName = '';\n    while (remaining > 0) {\n        let mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    } \n    return columnName + rowNum;\n};\n\n/**\n * Translates a Excel cell represenation into row and column numerical equivalents \n * @function getExcelRowCol\n * @param {String} str Excel cell representation\n * @returns {Object} Object keyed with row and col\n * @example\n * // returns {row: 2, col: 3}\n * getExcelRowCol('C2')\n */\nlet getExcelRowCol = (str) => {\n    let numeric = str.split(/\\D/).filter(function (el) {\n        return el !== '';\n    })[0];\n    let alpha = str.split(/\\d/).filter(function (el) {\n        return el !== '';\n    })[0];\n    let row = parseInt(numeric, 10);\n    let col = alpha.toUpperCase().split('').reduce(function (a, b, index, arr) {\n        return a + (b.charCodeAt(0) - 64) * Math.pow(26, arr.length - index - 1);\n    }, 0);\n    return { row: row, col: col };\n};\n\n/**\n * Translates a date into Excel timestamp\n * @function getExcelTS\n * @param {Date} date Date to translate\n * @returns {Number} Excel timestamp\n * @example\n * // returns 29810.958333333332\n * getExcelTS(new Date('08/13/1981'));\n */\nlet getExcelTS = (date) => {\n\n    let thisDt = new Date(date);\n    thisDt = new Date(thisDt.getTime() + 24 * 60 * 60 * 1000);\n\n    let epoch = new Date('1900-01-01T00:00:00.0000Z');\n\n    // Handle legacy leap year offset as described in  ยง18.17.4.1\n    const legacyLeapDate = new Date('1900-02-28T23:59:59.999Z');\n    if (thisDt - legacyLeapDate > 0) {\n        thisDt = new Date(thisDt.getTime() + 24 * 60 * 60 * 1000);\n    } \n\n    // Get milliseconds between date sent to function and epoch \n    let diff2 = thisDt.getTime() - epoch.getTime();\n\n    let ts = diff2 / (1000 * 60 * 60 * 24);\n\n    return parseFloat(ts.toFixed(7));\n};\n\nlet sortCellRefs = (a, b) => {\n    let aAtt = getExcelRowCol(a);\n    let bAtt = getExcelRowCol(b);\n    if (aAtt.col === bAtt.col) {\n        return aAtt.row - bAtt.row;\n    } else {\n        return aAtt.col - bAtt.col;\n    }\n};\n\nlet arrayIntersectSafe = (a, b) => {\n\n    if (a instanceof Array && b instanceof Array) {\n        var ai = 0, bi = 0;\n        var result = new Array();\n\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] < b[bi]) {\n                ai++;\n            } else if (a[ai] > b[bi]) {\n                bi++;\n            } else {\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n        }\n        return result;\n    } else {\n        throw new TypeError('Both variables sent to arrayIntersectSafe must be arrays');\n    }\n};\n\nlet getAllCellsInExcelRange = (range) => {\n    var cells = range.split(':');\n    var cell1props = getExcelRowCol(cells[0]);\n    var cell2props = getExcelRowCol(cells[1]);\n    return getAllCellsInNumericRange(cell1props.row, cell1props.col, cell2props.row, cell2props.col);\n};\n\nlet getAllCellsInNumericRange = (row1, col1, row2, col2) => {\n    var response = [];\n    row2 = row2 ? row2 : row1;\n    col2 = col2 ? col2 : col1;\n    for (var i = row1; i <= row2; i++) {\n        for (var j = col1; j <= col2; j++) {\n            response.push(getExcelAlpha(j) + i);\n        }\n    }\n    return response.sort(sortCellRefs);\n};\n\nlet boolToInt = (bool) => {\n    if (bool === true) {\n        return 1;\n    }\n    if (bool === false) {\n        return 0;\n    }\n    if (parseInt(bool) === 1) {\n        return 1;\n    }\n    if (parseInt(bool) === 0) {\n        return 0;\n    }\n    throw new TypeError('Value sent to boolToInt must be true, false, 1 or 0');\n};\n\n/*\n * Helper Functions\n */\n\nmodule.exports = {\n    generateRId,\n    getHashOfPassword,\n    getExcelAlpha,\n    getExcelCellRef,\n    getExcelRowCol,\n    getExcelTS,\n    sortCellRefs,\n    arrayIntersectSafe,\n    getAllCellsInExcelRange,\n    getAllCellsInNumericRange,\n    boolToInt\n};"],"mappings":"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"}